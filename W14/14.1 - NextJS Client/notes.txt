Reference: https://projects.100xdevs.com/tracks/nextjs-1/next-1

NextJS Intro:
Was introduced because of some "minor" inconsistencies in React:
    1. In React project, we have to maintain a separate backend project for the api routes(i.e front end project is separate from the backend project)
    2. React does not provide in built routing(we need to use third party libraries like react-router-dom)
    3. React was not SEO optimized(this was one of the biggest reason why NextJS was introduced)
    4. Waterfall problem

    ** SEO Optimization:
    Google crawlers could not rank React websites due to which Google did not know about a website if it was created using React

    What happens when we search for something on google.com. How does it find the top 10 results
    Google uses crawlers that are constantly running all over the world. These crawlers hit multiple websites, trying to figure out what they do and then 
    ranking them based on relevance
    
    Why React apps were not SEO optimized?
    When the crawler hits a websire, it gets an HTML. Looking at the HTML the crawler tags it, 
    for eg when a crawler hits netflix.com, looking the the content of the home page it figures out that this site is related to streaming shows/movies online. 
    So when someones searches for movie name, it will show Netflix in the search results
    But if the initial HTMl does not contain any information, the crawler will have no idea what this website is about. 
    The crawlers don't wait for the entire webpage to load(when javascript loads and runs later, it can populate content on the webpage but crawlers are 'not' browsers so it does not run the javascript)
    And React does not give the entire content in the initial HTML(index.html had root div whose content is empty initially and once the javascript runs it fills it with the react components)

    Google crawlers have now become advanced and they can now run some javascript, so ranking react websites is no longer a big issue but it was when Next JS was introduced

    ** Waterfall problem
    The request cycle in React involves multiple steps. For eg, say to get to the dashboard page of TYS app when user navigates to tys.com/dashboard
    i. The first request goes to get the index.html page which has reference to the script file
    ii. The second request goes to get the script file
    iii. The third request goes to the /me route to check if the user is logged in and return the user details if logged in
    iv. The fourth request makes the api call to get info that needs to be displayed in the dashboard page

    Each of these requests happen sequentially, they waterfall because request 2 depends on request 1 outcome, request 3 depends on request 2 outcome and so on
    This is the waterfall problem which increases the time to completely load the page because multiple requests are made one after the other

    It would be great if instead we got the index.html in step i with all the info we need


NextJS also offers some key features over React:
1. Server side rendering 
   In Next, the server is able to render the JSX, put it in the HTML and send it back to the browser. This is what helps Next overcome the SEO optimization and waterfall problem discussed above
2. API routes
   Next JS is not just a frontend framework(like React), but it is a full stack framework. So we dont need a separate front end application
3. File based routing
4. Bundle size optimization, static site generation(SSG)


Downsides of NextJS:
1. Can't be distributed via a CDN. Next always needs a server running that does the server side rendering. Hence it is expensive.
   It will not be a good choice for smaller projects.
2. Highly opinionated, very hard to move out of it(migrate the project to another framework from Next)


Bootstraping Next JS app:
1. npx create-next-app@latest
   Choose yes for App Router. This will add an app folder which will contain all your code/components/layouts/routes/apis

2. Create routes  
   Next has a file based router. 
   So for eg, if you want to add a route for /signup then add a folder named signup inside the app folder. 
   Add a file named page.tsx inside app/signup.
   Create a functional react component and export it
